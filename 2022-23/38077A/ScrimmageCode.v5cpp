{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor RightDriveMotorA = motor(PORT1, ratio18_1, true);\nmotor RightDriveMotorB = motor(PORT2, ratio18_1, false);\nmotor_group RightDrive = motor_group(RightDriveMotorA, RightDriveMotorB);\n\nmotor LeftDriveMotorA = motor(PORT19, ratio18_1, true);\nmotor LeftDriveMotorB = motor(PORT20, ratio18_1, false);\nmotor_group LeftDrive = motor_group(LeftDriveMotorA, LeftDriveMotorB);\n\nmotor ShooterGroupMotorA = motor(PORT3, ratio6_1, true);\nmotor ShooterGroupMotorB = motor(PORT4, ratio6_1, false);\nmotor_group ShooterGroup = motor_group(ShooterGroupMotorA, ShooterGroupMotorB);\n\nmotor IntakeMotor = motor(PORT11, ratio18_1, false);\n\ninertial InertialSensor = inertial(PORT5);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\n//float myVariable, forksDown, forksUp, forksCarrying, clawDown, clawUp;\n\n//float testing[4][4];\n\n\nconst int INTAKE_SPEED_FOR_SHOOTING = 50;\nconst int INTAKE_SPEED = 100;\n\nclass Shooter {\n\n  enum ShooterState {\n    kShooterUnknownState = 0,\n    kRotatingToTarget,\n    kOnTarget,\n    kShooterReady,\n    kShooting,\n    kEmpty,\n    kIdle\n  };\n\n  ShooterState shooterState = kShooterUnknownState;\n\n  int CalculateShooterSpeed() { // in RPM\n    // use camera info to determine distance to target\n    // and from distance, determine speed\n    return (500);\n  }\n\n  public:\n  void FullAutoShoot() {\n    IntakeMotor.setVelocity(INTAKE_SPEED_FOR_SHOOTING, percent);\n    Controller1.Screen.setCursor(1, 1);\n    Controller1.Screen.clearLine(1);\n    Controller1.Screen.print(shooterState);\n    int speed = CalculateShooterSpeed();\n    int minSpeed = speed * 95/100;\n    switch(shooterState) {\n      default:\n      case kShooterUnknownState:\n      case kIdle:\n        shooterState = kOnTarget;\n        break;\n      case kOnTarget:\n        // wait for flywheel to come up to speed\n        ShooterGroup.setVelocity(speed, rpm);\n        ShooterGroup.spin(forward);\n        if (ShooterGroupMotorA.velocity(rpm) >= minSpeed) {\n          shooterState = kShooterReady;\n        }\n        break;\n      case kShooterReady:\n        IntakeMotor.spin(forward);\n        shooterState = kShooting;\n        break;\n      case kShooting:\n        // go back to waiting for spinup between shots\n        if (ShooterGroupMotorA.velocity(rpm) < minSpeed) {\n          // too slow!\n          IntakeMotor.stop();\n          shooterState = kOnTarget;\n        }\n        break;\n      }\n  }\n\n  void Teleop() {\n    if (Controller1.ButtonA.pressing()) {\n      //ShooterGroup.spinFor(reverse, 30, degrees);\n      ShooterGroup.spin(forward);\n    } else {\n      ShooterGroup.stop();\n    }\n  }\n\n  void ResetShooterState() {\n    shooterState = kIdle;\n  }\n\n}; // class shooter\n\nclass Drive {\n  public:\n  void calibrateDrivetrain() {\n    wait(200, msec);\n    Brain.Screen.print(\"Calibrating\");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Gyro\");\n    InertialSensor.calibrate();\n    while (InertialSensor.isCalibrating()) {\n      wait(25, msec);\n    }\n  }\n  // Adjust speed settings to be normalized, so neither motor speed is > 100\n  // input: joystick positions\n  // side effects: modifies LeftSpeed and RightSpeed\n  void NormalizeSpeeds(float driveStick, float turnStick, float &LeftSpeed, float &RightSpeed) {\n    float totalStick = fabs(driveStick) + fabs(turnStick);\n    if (totalStick > 100.0) {\n      LeftSpeed = (LeftSpeed * 100.0) / totalStick;\n      RightSpeed = (RightSpeed * 100.0) / totalStick;\n    }\n  }\n  public:\n  void Teleop() {\n    float driveStick = Controller1.Axis3.position();\n    float turnStick = Controller1.Axis1.position();\n    float leftSpeed = driveStick - turnStick;\n    float rightSpeed = driveStick + turnStick;\n    NormalizeSpeeds (driveStick, turnStick, leftSpeed, rightSpeed);\n    LeftDrive.setVelocity(leftSpeed, percent);\n    RightDrive.setVelocity(rightSpeed, percent);\n    LeftDrive.spin(forward);\n    RightDrive.spin(forward);\n  }\n};\n\nclass Intake {\n  public:\n  void Teleop() {\n    if (Controller1.ButtonR1.pressing()) {\n      IntakeMotor.setVelocity(INTAKE_SPEED, percent);\n      IntakeMotor.spin(forward);\n    } else if (Controller1.ButtonR2.pressing()) {\n      IntakeMotor.setVelocity(INTAKE_SPEED, percent);\n      IntakeMotor.spin(reverse);\n    } else {\n      IntakeMotor.stop();\n    }\n  }\n};\n\n\n\nShooter myShooter;\nDrive myDrive;\nIntake myIntake;\n\n\n\n// User defined function\nvoid startup() {\n  ShooterGroup.setStopping(coast);\n  myDrive.calibrateDrivetrain();\n}\n\nvoid driverControl() {\n\n  while (true) {\n    if (Controller1.ButtonB.pressing()) { // This is full auto\n      myShooter.FullAutoShoot();\n\n    } else { // Not full auto\n\n      myShooter.ResetShooterState();\n\n      // drive\n      myDrive.Teleop();\n\n      // intake\n      myIntake.Teleop();\n      \n\n      // shooter\n      \n\n\n      \n      \n    }\n\n  wait(5, msec);\n  }\n}\n\n// User defined function\nvoid runAutonomous() {\n  /*\n  LeftDrive.setVelocity(100.0, percent);\n  RightDrive.setVelocity(100.0, percent);\n  Forklift.setVelocity(30.0, percent);\n  LeftDrive.spin(forward);\n  RightDrive.spin(forward);\n  wait(2.7, seconds);\n  RightDrive.stop();\n  LeftDrive.stop();\n  Forklift.spinToPosition(forksCarrying, degrees, true);\n  RightDrive.spin(reverse);\n  LeftDrive.spin(reverse);\n  wait(3.0, seconds);\n  LeftDrive.stop();\n  RightDrive.stop();\n  Controller1.rumble(\"-.-.\");\n  */\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  runAutonomous();\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  startup();\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  driverControl();\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"RightDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[19,20],"name":"LeftDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[3,4],"name":"ShooterGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[11],"name":"IntakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[5],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}