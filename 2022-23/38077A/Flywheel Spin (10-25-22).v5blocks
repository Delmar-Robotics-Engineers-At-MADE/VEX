{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"!=d(IRbx^`5/6!EgEXoW\"><field name=\"MOTOR\">MotorGroup1</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"mlGEAEsF74sTX3m1Ey^9\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_spin\" id=\"W[FAb9iQtJ1Zd8~$DJ|z\"><field name=\"MOTOR\">MotorGroup1</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_control_forever\" id=\"=TZSSZC#_DD(3Zk0T:fP\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_clear_all_rows\" id=\"|VAr/GO:0(L=d7:11`Kw\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_set_cursor\" id=\"}[$0D5!YLe5xHNPh,mzk\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"+%=u2hsl3n45f7Mlth(.\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"nmI7-31FJUqNxxe9EJDW\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"%tW@t*uM`lN-}O(53p.S\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"(6%UP9k*)Yqmz/]DBWp)\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_velocity_of_motor\" id=\"[o-NPO=O[uP+pK3kfi{D\"><field name=\"MOTOR\">MotorGroup1</field><field name=\"UNITS\">rpm</field></block></value><next><block type=\"v5_looks_print\" id=\"gA4^:bCz]:FI!Fn:)2+%\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"@CPO4xqG!ybGqgMgXNpE\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_operator_multiply\" id=\"2N_m_FI.Y1Bkc_Rc/)2I\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"/7nF,vOwugyo@n9HOXFO\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_current_of_motor\" id=\"+:5Y:qc#0|ABV]3Qd|Ly\"><field name=\"MOTOR\">MotorGroup1</field></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\"@.CahmTC;)}]!-8KcCGo\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"v5_looks_print\" id=\"o8$pry,dOScnf#]c#.FL\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"L-@F#=_^lQlwEc~j#[ct\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_power_of_motor\" id=\"mwmf9^V$KHyg}1TC).{$\"><field name=\"MOTOR\">MotorGroup1</field></block></value><next><block type=\"v5_looks_print\" id=\"=ZOh;UB(3P`5n![(wwMW\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"_^b7f?;kjtv!Fj|x@]T;\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_temperature_of_motor\" id=\"q]+5OvB+Eu5QO9VHo}nn\"><field name=\"MOTOR\">MotorGroup1</field></block></value><next><block type=\"v5_looks_print\" id=\"Y)h0G}Wz6s~pdA(ya#;)\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">TRUE</field><value name=\"DATA\"><shadow type=\"text\" id=\"TFaj+O7Ue32@Ay!k!ZDZ\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_operator_multiply\" id=\"d60ira/9NL@5dnXAk}*O\"><value name=\"NUM1\"><shadow type=\"math_number\" id=\"RR4GP1}4~CjE+yqnsrRQ\"><field name=\"NUM\"></field></shadow><block type=\"v5_sensing_battery_current\" id=\"YTR8m[8oE)w^NYqRj).^\"></block></value><value name=\"NUM2\"><shadow type=\"math_number\" id=\":}xwSSF~^k=Q87xAOet0\"><field name=\"NUM\">1000</field></shadow></value></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,2],"name":"MotorGroup1","customName":false,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor MotorGroup1MotorA = motor(PORT1, ratio18_1, false);\nmotor MotorGroup1MotorB = motor(PORT2, ratio18_1, true);\nmotor_group MotorGroup1 = motor_group(MotorGroup1MotorA, MotorGroup1MotorB);\n\n\n\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  MotorGroup1.setVelocity(100.0, percent);\n  MotorGroup1.spin(reverse);\n  while (true) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(MotorGroup1.velocity(rpm)));\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(MotorGroup1.current(amp) * 1000.0));\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(MotorGroup1.power(watt)));\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(MotorGroup1.temperature(percent)));\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Brain.Battery.current(amp) * 1000.0));\n    Brain.Screen.newLine();\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}