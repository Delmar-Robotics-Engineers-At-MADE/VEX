{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nForklift_motor_a = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nForklift_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nForklift = MotorGroup(Forklift_motor_a, Forklift_motor_b)\nLeftDrive_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nLeftDrive_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nLeftDrive = MotorGroup(LeftDrive_motor_a, LeftDrive_motor_b)\nRightDrive_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nRightDrive_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nRightDrive = MotorGroup(RightDrive_motor_a, RightDrive_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nmyVariable = 0\nforksDown = 0\nforksUp = 0\nforksCarrying = 0\n\nmyVariable = 0\n\ndef onauton_autonomous_0():\n    global myVariable\n    LeftGroup.set_stopping(BRAKE)\n    RightMotor.set_stopping(BRAKE)\n    LeftGroup.set_velocity(100, PERCENT)\n    RightMotor.set_velocity(100, PERCENT)\n    LeftGroup.spin(FORWARD)\n    RightMotor.spin(FORWARD)\n    wait(1, SECONDS)\n    RightMotor.spin_for(REVERSE, 180, DEGREES, wait=True)\n    LeftGroup.spin_for(FORWARD, 180, DEGREES, wait=True)\n    Fork.spin_to_position(180, DEGREES, wait=True)\n    wait(1, SECONDS)\n    LeftGroup.stop()\n    RightMotor.stop()\n    LeftGroup.set_velocity(100, PERCENT)\n    RightMotor.set_velocity(100, PERCENT)\n    Fork.set_velocity(100, PERCENT)\n    # stop project not currently supported\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\ndef ondriver_drivercontrol_0():\n    global myVariable, forksDown, forksUp, forksCarrying, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    while True:\n        if controller_1.buttonR1.pressing() and controller_1.buttonR2.pressing():\n            Forklift.spin_to_position(forksCarrying, DEGREES, wait=False)\n        elif controller_1.buttonR1.pressing():\n            Forklift.spin_to_position(forksUp, DEGREES, wait=False)\n        elif controller_1.buttonR2.pressing():\n            Forklift.spin_to_position(forksDown, DEGREES, wait=False)\n        else:\n            Forklift.stop()\n        LeftDrive.set_velocity((controller_1.axis3.position() + controller_1.axis1.position()), PERCENT)\n        RightDrive.set_velocity((controller_1.axis3.position() - controller_1.axis1.position()), PERCENT)\n        LeftDrive.spin(FORWARD)\n        RightDrive.spin(FORWARD)\n        wait(5, MSEC)\n\ndef when_started1():\n    global myVariable, forksDown, forksUp, forksCarrying, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    Forklift.set_position(0, DEGREES)\n    Forklift.set_velocity(25, PERCENT)\n    Forklift.set_stopping(HOLD)\n    forksDown = 35\n    forksUp = 1400\n    forksCarrying = 160\n\ndef onauton_autonomous_0():\n    global myVariable, forksDown, forksUp, forksCarrying, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    pass\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[8,9],"name":"Forklift","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[19,20],"name":"LeftDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1,2],"name":"RightDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}