{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n  \n# constructors\n\ndrivetrain = Drivetrain()\nbrain = Brain()\nbottom_distance = Distance(\"BottomDistance\", 18)\nroller_optical = Optical(\"RollerOptical\", 2)\ngps = GPS(\"GPS\", 3)\nintake_motor_group = Motor(\"IntakeMotorGroup\", 10)\nbottom_line_tracker = LineTracker(\"BottomLineTracker\", 22)\nmiddle_line_tracker = LineTracker(\"MiddleLineTracker\", 23)\ntop_line_tracker = LineTracker(\"TopLineTracker\", 24)\n#endregion VEXcode Generated Robot Configuration\nmyVariable = 0\n\ndef Get_rings_discs(Get_rings_discs__discs):\n    global myVariable\n    if bottom_distance.is_object_detected() and bottom_distance.object_distance(MM) < 1000:\n        drivetrain.drive_for(FORWARD, bottom_distance.object_distance(MM), MM, wait=True)\n        intake_motor_group.spin(REVERSE)\n        if Get_rings_discs__discs == 1:\n            wait(0.3, SECONDS)\n        if Get_rings_discs__discs == 2:\n            wait(0.6, SECONDS)\n        if Get_rings_discs__discs == 3:\n            wait(1.1, SECONDS)\n        intake_motor_group.stop()\n\ndef Spin_towards_x__x_y__y_side_facing__side(Spin_towards_x__x_y__y_side_facing__side__x, Spin_towards_x__x_y__y_side_facing__side__y, Spin_towards_x__x_y__y_side_facing__side__side):\n    global myVariable\n    if Spin_towards_x__x_y__y_side_facing__side__side == 1:\n        drivetrain.turn_to_heading((math.atan((Spin_towards_x__x_y__y_side_facing__side__y - gps.y_position(MM)) / (Spin_towards_x__x_y__y_side_facing__side__x - gps.x_position(MM))) / math.pi * 180), DEGREES, wait=True)\n    else:\n        drivetrain.turn_to_heading((-1 * (math.atan((Spin_towards_x__x_y__y_side_facing__side__y - gps.y_position(MM)) / (Spin_towards_x__x_y__y_side_facing__side__x - gps.x_position(MM))) / math.pi * 180)), DEGREES, wait=True)\n\ndef Spin_rollers():\n    global myVariable\n    if roller_optical.is_near_object() and roller_optical.color() == BLUE.value:\n        while not roller_optical.color() == RED.value:\n            intake_motor_group.spin(FORWARD)\n            wait(5, MSEC)\n        intake_motor_group.stop()\n\ndef Shoot_discs_discs(Shoot_discs_discs__discs):\n    global myVariable\n    intake_motor_group.spin(REVERSE)\n    if Shoot_discs_discs__discs == 1:\n        wait(0.6, SECONDS)\n    if Shoot_discs_discs__discs == 2:\n        wait(1.2, SECONDS)\n    if Shoot_discs_discs__discs == 3:\n        wait(1.1, SECONDS)\n    intake_motor_group.stop()\n\ndef when_started1():\n    global myVariable\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    intake_motor_group.set_velocity(100, PERCENT)\n    Get_rings_discs(3)\n    Spin_towards_x__x_y__y_side_facing__side(-1300, -1300, 2)\n    Shoot_discs_discs(3)\n    # stop project not currently supported\n\nvr_thread(when_started1)\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Virtual","virtualSkillsYear":"2023"}