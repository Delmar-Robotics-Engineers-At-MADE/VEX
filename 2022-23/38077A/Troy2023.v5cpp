{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor ShooterGroupMotorA = motor(PORT3, ratio6_1, true);\nmotor ShooterGroupMotorB = motor(PORT4, ratio6_1, false);\nmotor_group ShooterGroup = motor_group(ShooterGroupMotorA, ShooterGroupMotorB);\n\n/*vex-vision-config:begin*/\nvision::signature Vision21__SIG_1 = vision::signature (1, 6139, 6653, 6396,-669, -243, -456,3, 0);\nvision::signature Vision21__SIG_2 = vision::signature (2, -3429, -1723, -2576,5763, 9055, 7408,3, 0);\nvision Vision21 = vision (PORT21, 51, Vision21__SIG_1, Vision21__SIG_2);\n/*vex-vision-config:end*/\n\nmotor IntakeMotor = motor(PORT11, ratio18_1, false);\n\ninertial InertialSensor = inertial(PORT5);\n\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT19, ratio18_1, true);\nmotor rightMotorB = motor(PORT20, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ninertial DrivetrainInertial = inertial(PORT6);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\ncontroller Controller2 = controller(partner);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // stop the motors if the brain is calibrating\n      if (DrivetrainInertial.isCalibrating()) {\n        LeftDriveSmart.stop();\n        RightDriveSmart.stop();\n        while (DrivetrainInertial.isCalibrating()) {\n          wait(25, msec);\n        }\n      }\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\n//float myVariable, forksDown, forksUp, forksCarrying, clawDown, clawUp;\n\n//float testing[4][4];\n\n\nconst int INTAKE_SPEED_FOR_SHOOTING = 50;\nconst int INTAKE_SPEED = 100;\nconst int SHOOTER_SPEED_FOR_AUTO = 600;\nstatic float XTolerance = 30.0;\nstatic float BaseForAngleCalc = 160.0;\nstatic float MinimumArea = 10000.0;\nstatic float TargetAspect = 100.0;\nstatic float MaxAspectError = 1.5;\nstatic float MinAspectError = 0.7;\n\nclass Shooter {\n\n  enum ShooterState {\n    kShooterUnknownState = 0,\n    kRotatingToTarget,\n    kOnTarget,\n    kShooterReady,\n    kShooting,\n    kEmpty,\n    kIdle\n  };\n\n  ShooterState shooterState = kShooterUnknownState;\n\nint FindBestVisionObject(bool visualize) {\n  int i = 0;\n  int bestIndex = 0;\n  float bestAspectError = 0.0;\n  float bestAspect = 0.0;\n  while ((i < Vision21.objectCount)) {\n    Brain.Screen.setFillColor(white);\n    float area = Vision21.objects[i].width * Vision21.objects[i].height;\n    if (area > MinimumArea) {\n      Brain.Screen.setFillColor(green);\n      float aspectRatio = (Vision21.objects[i].height * 100.0) / Vision21.objects[i].width;\n      float aspectError = aspectRatio / TargetAspect;\n      if (aspectError < MaxAspectError && aspectError > MinAspectError) {\n        Brain.Screen.setFillColor(red);\n        bestIndex = i;\n        bestAspectError = aspectError;\n        bestAspect = aspectRatio;\n      }\n    }\n    i++;\n  wait(5, msec);\n  }\n  if (visualize) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.drawRectangle(200, 50, Vision21.objects[bestIndex].width, Vision21.objects[bestIndex].height);\n  }\n  return (bestIndex);\n}\n\n  public:\n  int CalculateShooterSpeed(bool isAuto, int startingPosition) {\n\n    int result = 0;\n\n    if (isAuto) {\n      result = SHOOTER_SPEED_FOR_AUTO;\n    } else {\n      if (Controller1.ButtonUp.pressing() || Controller2.ButtonUp.pressing()) {\n        result = 500;\n      } else if (Controller1.ButtonRight.pressing() || Controller2.ButtonRight.pressing()) {\n        result = 375;\n      } else if (Controller1.ButtonDown.pressing() || Controller2.ButtonDown.pressing()) {\n        result = 250;\n      } else if (Controller1.ButtonLeft.pressing() || Controller2.ButtonLeft.pressing()) {\n        result = 125;\n      } else {\n        // in RPM\n        // use camera info to determine distance to target\n        // and from distance, determine speed\n        result = 500;\n      }\n    }\n    \n    return (result);\n  }\n\n  public:\n  void FullAutoShoot(bool isAuto, int startingPosition) {\n    IntakeMotor.setVelocity(INTAKE_SPEED_FOR_SHOOTING, percent);\n    Controller1.Screen.setCursor(1, 1);\n    Controller1.Screen.clearLine(1);\n    Controller1.Screen.print(shooterState);\n    int speed = CalculateShooterSpeed(isAuto, startingPosition);\n    int minSpeed = speed * 95/100;\n    switch(shooterState) {\n      default:\n      case kShooterUnknownState:\n      case kIdle:\n        shooterState = kOnTarget;\n        break;\n      case kOnTarget:\n        // wait for flywheel to come up to speed\n        ShooterGroup.setVelocity(speed, rpm);\n        ShooterGroup.spin(forward);\n        if (ShooterGroupMotorA.velocity(rpm) >= minSpeed) {\n          shooterState = kShooterReady;\n        }\n        break;\n      case kShooterReady:\n        IntakeMotor.spin(forward);\n        shooterState = kShooting;\n        break;\n      case kShooting:\n        // go back to waiting for spinup between shots\n        if (ShooterGroupMotorA.velocity(rpm) < minSpeed) {\n          // too slow!\n          IntakeMotor.stop();\n          shooterState = kOnTarget;\n        }\n        break;\n      }\n  }\n\n  void Teleop() {\n    ShooterGroup.setVelocity(CalculateShooterSpeed(false, 0), rpm);\n    if (Controller1.ButtonA.pressing()) {\n      //ShooterGroup.spinFor(reverse, 30, degrees);\n      ShooterGroup.spin(forward);\n    } else {\n      ShooterGroup.stop();\n    }\n  }\n\n  void ResetShooterState() {\n    shooterState = kIdle;\n  }\n\n}; // class shooter\n\nclass Drive {\n  public:\n  void calibrateDrivetrain() {\n    wait(200, msec);\n    Brain.Screen.print(\"Calibrating\");\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Gyro\");\n    InertialSensor.calibrate();\n    while (InertialSensor.isCalibrating()) {\n      wait(25, msec);\n    }\n  }\nvoid TurnToBestObject(int objIndex) {\n  if (fabs(static_cast<float>(Vision21.objects[objIndex].centerX - 180.0)) > XTolerance) {\n    Drivetrain.turnToHeading(\n      Drivetrain.heading() + atan((Vision21.objects[objIndex].centerX - 180.0) / BaseForAngleCalc) * 180 / M_PI, \n      degrees, true);\n  } else {\n    Drivetrain.stop();\n  }\n}\n  // Adjust speed settings to be normalized, so neither motor speed is > 100\n  // input: joystick positions\n  // side effects: modifies LeftSpeed and RightSpeed\n  void NormalizeSpeeds(float driveStick, float turnStick, float &LeftSpeed, float &RightSpeed) {\n    float totalStick = fabs(driveStick) + fabs(turnStick);\n    if (totalStick > 100.0) {\n      LeftSpeed = (LeftSpeed * 100.0) / totalStick;\n      RightSpeed = (RightSpeed * 100.0) / totalStick;\n    }\n  }\n  public:\n  void Teleop() {\n    float driveStick = Controller1.Axis3.position();\n    float turnStick = Controller1.Axis1.position();\n    float leftSpeed = driveStick - turnStick;\n    float rightSpeed = driveStick + turnStick;\n    NormalizeSpeeds (driveStick, turnStick, leftSpeed, rightSpeed);\n    LeftDriveSmart.setVelocity(leftSpeed, percent);\n    RightDriveSmart.setVelocity(rightSpeed, percent);\n    LeftDriveSmart.spin(forward);\n    RightDriveSmart.spin(forward);\n  }\n};\n\nclass Intake {\n  public:\n  void Teleop() {\n    if (Controller1.ButtonR1.pressing()) {\n      IntakeMotor.setVelocity(INTAKE_SPEED, percent);\n      IntakeMotor.spin(forward);\n    } else if (Controller1.ButtonR2.pressing()) {\n      IntakeMotor.setVelocity(INTAKE_SPEED, percent);\n      IntakeMotor.spin(reverse);\n    } else {\n      IntakeMotor.stop();\n    }\n  }\n};\n\n\n\nShooter myShooter;\nDrive myDrive;\nIntake myIntake;\n\n\n\n// User defined function\nvoid startup() {\n  ShooterGroup.setStopping(coast);\n  Brain.Timer.clear();\n  myDrive.calibrateDrivetrain();\n}\n\nvoid driverControl() {\n\n  while (true) {\n    if (Controller1.ButtonB.pressing()) { // This is full auto\n      myShooter.FullAutoShoot(false, 0);\n\n    } else { // Not full auto\n\n      myShooter.ResetShooterState();\n\n      // drive\n      myDrive.Teleop();\n\n      // intake\n      myIntake.Teleop();\n      \n      // shooter\n      myShooter.Teleop();\n    }\n\n  wait(5, msec);\n  }\n}\n\n// User defined function\nvoid runAutonomous() {\n  while (Brain.Timer.time(seconds) < 5) {\n    myShooter.FullAutoShoot(true, 1);\n  }\n  ShooterGroup.stop();\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  runAutonomous();\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  startup();\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  driverControl();\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[3,4],"name":"ShooterGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[11],"name":"IntakeMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[5],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1,2,19,20,6],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}