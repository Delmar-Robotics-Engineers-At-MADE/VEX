{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_control_forever\" id=\"08RZ76(MS;MpC}5w--^f\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_set_cursor\" id=\"@tDC3C;-([:(@y^Bs6JR\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"3BZ*hTQDKEm(n5qz%0lf\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"TT1NVH7X#rIkb(|:)@K=\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_clear_row\" id=\"DC*X#.HrCp9(XZOz=3n*\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"NYQ*{oN8_[eM_RG23DZP\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"KWKqvxbdQUQp(X#uC+qr\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"hFCECqAm}h=%)16YIgV]\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_angle_of\" id=\"}mTxw-+W|f1);f{HlwMw\"><field name=\"POTENTIOMETER\">PotentiometerV2A</field><field name=\"UNITS\">pct</field></block></value><next><block type=\"v5_control_wait\" id=\"g-?B?wEWSw@WhaEB.~I`\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"l#gK,MSb,?SWjeaKyuZ*\"><field name=\"NUM\">.3</field></shadow></value></block></next></block></next></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[1],"name":"PotentiometerV2A","customName":false,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{},"triportSourcePort":22}],"slot":4,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\npotV2 PotentiometerV2A = potV2(Brain.ThreeWirePort.A);\n\n\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.clearLine(1);\n    Brain.Screen.setCursor(Brain.Screen.row(), 1);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(PotentiometerV2A.angle(percent)));\n    wait(0.3, seconds);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}