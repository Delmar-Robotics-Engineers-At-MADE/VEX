{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><comment id=\"QfXO4n$Chbj%ob:kbblt\" x=\"275\" y=\"-609\" h=\"326\" w=\"629\">Project: Controlling Disco\n\nDescription:\nThis program will show you how to control the VRC 2022 Herobot Disco's\nIntake Motor Group with the \"When Controller\" events and the drivetrain\nwith the configured controller.\nThe R1 button will intake\nThe R2 button will outtake\nThe Joystick is configured with Tank controls\n\nConfiguration:\nVRC 2022 Disco (Drivetrain 2-motor, No Gyro)\nIntake Motor Group in Ports 10 &amp; 20\nController</comment><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"10\" y=\"10\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"im_L]v7z4N5D}y1mEHTa\"><field name=\"MOTOR\">IntakeMotorGroup</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"!S]=*t}V@a/E#v26}0~w\"><field name=\"NUM\">100</field></shadow></value></block></next></block><block type=\"v5_events_when_controller_button\" id=\")A(@5po7o1os2,4`O-|n\" x=\"10\" y=\"170\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"procedures_call\" id=\"3`+WLFcN2d{Ml1IaqKna\"><mutation proccode=\"Intake\" proceduredefid=\"3|qVWI@$~^J#}g1T*I[.\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"v5_events_when_controller_button\" id=\"-];j@8wU:x^`*,c;BwBx\" x=\"10\" y=\"330\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"procedures_call\" id=\"etRID4Y-U(0EyP|^hS7a\"><mutation proccode=\"Outtake\" proceduredefid=\"ehp!Pq:hMG]55moP,Ins\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"procedures_definition\" id=\"^!H}}uEvK.RcM)9On1-`\" x=\"10\" y=\"490\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"3|qVWI@$~^J#}g1T*I[.\"><mutation proccode=\"Intake\" proceduredefid=\"3|qVWI@$~^J#}g1T*I[.\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"v5_motion_spin\" id=\"|5JPs;4l6bz0EpYiIcNW\"><field name=\"MOTOR\">IntakeMotorGroup</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_control_wait_until\" id=\"i:Dv`f:^FNP6R.BrO3]y\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\"qeoJq)Ls[N*O2C,@Q,kD\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_controller\" id=\"GIQ}JA*Z083ngS?iz~Z2\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field></block></value></block></value><next><block type=\"v5_motion_stop_motor\" id=\"p?$gDB4qR{c/2uy3WHV6\"><field name=\"MOTOR\">IntakeMotorGroup</field></block></next></block></next></block></next></block><block type=\"procedures_definition\" id=\"m,@GFglITXm|Lu8t5)lc\" x=\"10\" y=\"770\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"ehp!Pq:hMG]55moP,Ins\"><mutation proccode=\"Outtake\" proceduredefid=\"ehp!Pq:hMG]55moP,Ins\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"v5_motion_spin\" id=\"N6MtE+{N,1s9#OtM5U@c\"><field name=\"MOTOR\">IntakeMotorGroup</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_control_wait_until\" id=\"2r`tp%ijy[TD5O**~|e|\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\",OtIVP2f1N7r3E,8ML;:\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_controller\" id=\"rX4kK|:X~m7{|9:RU=8t\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field></block></value></block></value><next><block type=\"v5_motion_stop_motor\" id=\"@ci)mdY/},8]/BU3K/.H\"><field name=\"MOTOR\">IntakeMotorGroup</field></block></next></block></next></block></next></block><block type=\"v5_events_when_controller_button\" id=\"bTR@]7aq_feANg,f@WQ|\" x=\"10\" y=\"1050\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"procedures_call\" id=\"#B%,cztin{JEE:0CyVJQ\"><mutation proccode=\"Roller Color Detection\" proceduredefid=\"6ZVYhRIU4O6dnmZDG*d;\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"procedures_definition\" id=\"$l584(:[K$Y?ivq9#jlw\" x=\"10\" y=\"1210\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"6ZVYhRIU4O6dnmZDG*d;\"><mutation proccode=\"Roller Color Detection\" proceduredefid=\"6ZVYhRIU4O6dnmZDG*d;\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement><next><block type=\"v5_control_repeat_until\" id=\"pdlvb89k|TLqYHk84QF+\"><value name=\"CONDITION\"><block type=\"v5_sensing_optical_detect\" id=\";S6lEh/hyq`0t!3f@L}U\"><field name=\"OPTICAL\">Optical18</field><field name=\"COLORS\">red</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"7RNz[a(vHx,^txv_HD7#\"><field name=\"MOTOR\">IntakeMotorGroup</field><field name=\"DIRECTION\">fwd</field></block></statement></block></next></block></xml>","rconfig":[{"port":[10,20],"name":"IntakeMotorGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"intake","rev":"outtake","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[19,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel275in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"290","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[18],"name":"Optical18","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{"id":"partner"}}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor IntakeMotorGroupMotorA = motor(PORT10, ratio18_1, true);\nmotor IntakeMotorGroupMotorB = motor(PORT20, ratio18_1, true);\nmotor_group IntakeMotorGroup = motor_group(IntakeMotorGroupMotorA, IntakeMotorGroupMotorB);\n\ncontroller Controller1 = controller(primary);\nmotor LeftDriveSmart = motor(PORT19, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT12, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 219.44, 290, 40, mm, 1);\n\noptical Optical18 = optical(PORT18);\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\nvoid myblockfunction_Intake();\n// User defined function\nvoid myblockfunction_Outtake();\n// User defined function\nvoid myblockfunction_Roller_Color_Detection();\n\nfloat myVariable;\n\n// User defined function\nvoid myblockfunction_Intake() {\n  IntakeMotorGroup.spin(forward);\n  waitUntil((!Controller1.ButtonR1.pressing()));\n  IntakeMotorGroup.stop();\n}\n\n// User defined function\nvoid myblockfunction_Outtake() {\n  IntakeMotorGroup.spin(reverse);\n  waitUntil((!Controller1.ButtonR2.pressing()));\n  IntakeMotorGroup.stop();\n}\n\n// User defined function\nvoid myblockfunction_Roller_Color_Detection() {\n  while (!Optical18.color() == red) {\n    IntakeMotorGroup.spin(forward);\n  wait(5, msec);\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  IntakeMotorGroup.setVelocity(100.0, percent);\n  return 0;\n}\n\n// \"when Controller1 ButtonR1 pressed\" hat block\nvoid onevent_Controller1ButtonR1_pressed_0() {\n  myblockfunction_Intake();\n}\n\n// \"when Controller1 ButtonR2 pressed\" hat block\nvoid onevent_Controller1ButtonR2_pressed_0() {\n  myblockfunction_Outtake();\n}\n\n// \"when Controller1 ButtonUp pressed\" hat block\nvoid onevent_Controller1ButtonUp_pressed_0() {\n  myblockfunction_Roller_Color_Detection();\n}\n\n\nint main() {\n  // register event handlers\n  Controller1.ButtonR1.pressed(onevent_Controller1ButtonR1_pressed_0);\n  Controller1.ButtonR2.pressed(onevent_Controller1ButtonR2_pressed_0);\n  Controller1.ButtonUp.pressed(onevent_Controller1ButtonUp_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}