{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor RightDriveMotorA = motor(PORT1, ratio18_1, true);\nmotor RightDriveMotorB = motor(PORT2, ratio18_1, false);\nmotor_group RightDrive = motor_group(RightDriveMotorA, RightDriveMotorB);\n\nmotor LeftDriveMotorA = motor(PORT19, ratio18_1, true);\nmotor LeftDriveMotorB = motor(PORT20, ratio18_1, false);\nmotor_group LeftDrive = motor_group(LeftDriveMotorA, LeftDriveMotorB);\n\nmotor ShooterGroupMotorA = motor(PORT3, ratio6_1, true);\nmotor ShooterGroupMotorB = motor(PORT4, ratio6_1, false);\nmotor_group ShooterGroup = motor_group(ShooterGroupMotorA, ShooterGroupMotorB);\n\nmotor Intake = motor(PORT11, ratio18_1, false);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// User defined function\n// void myblockfunction_NormalizeSpeeds();\n// // void myblockfunction_ShowSpeeds_left_right_row(double myblockfunction_ShowSpeeds_left_right_row__left, double myblockfunction_ShowSpeeds_left_right_row__right, double myblockfunction_ShowSpeeds_left_right_row__row);\n// void myblockfunction_Drive();\n\n// Global variables\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\n// formerly global variables: float myVariable, DriveStick, TurnStick, TotalStick, LeftSpeed, RightSpeed;\n\n// functions for printing, defined at end of file\nconst char* printToBrain_numberFormat();\n\n// Adjust speed settings to be normalized, so neither motor speed is > 100\n// input: joystick positions\n// side effects: modifies LeftSpeed and RightSpeed\nvoid NormalizeSpeeds(float driveStick, float turnStick, float &LeftSpeed, float &RightSpeed) {\n  float totalStick = fabs(driveStick) + fabs(turnStick);\n  if (totalStick > 100.0) {\n    LeftSpeed = (LeftSpeed * 100.0) / totalStick;\n    RightSpeed = (RightSpeed * 100.0) / totalStick;\n  }\n}\n\n// Display speeds on brain\nvoid ShowSpeeds(float left, float right, int row) {\n  Brain.Screen.setCursor(row, 1);\n  Brain.Screen.clearLine(row);\n  Brain.Screen.setCursor(Brain.Screen.row(), 1);\n  Brain.Screen.print(printToBrain_numberFormat(), left);\n  Brain.Screen.print(\" \");\n  Brain.Screen.print(printToBrain_numberFormat(), right);\n}\n\n// Send speeds to drive motors... Move!\nvoid myblockfunction_Drive(float leftSpeed, float rightSpeed) {\n  Left.setVelocity(leftSpeed, percent);\n  Right.setVelocity(rightSpeed, percent);\n  Left.spin(forward);\n  Right.spin(forward);\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Left.setStopping(brake);\n  Right.setStopping(brake);\n  while (true) {\n    float driveStick = Controller1.Axis3.position();\n    float turnStick = Controller1.Axis1.position();\n    float leftSpeed = driveStick + turnStick;\n    float rightSpeed = driveStick - turnStick;\n    ShowSpeeds(leftSpeed, rightSpeed, 1.0);\n    NormalizeSpeeds(driveStick, turnStick, leftSpeed, rightSpeed);\n    ShowSpeeds(leftSpeed, rightSpeed, 2.0);\n    wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}