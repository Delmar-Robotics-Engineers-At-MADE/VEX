{"mode":"Text","textContent":"// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.print(\"Calibrating!\");\n  Brain.Screen.setFillColor(red);\n  Brain.Screen.drawRectangle(50, 50, 400, 100);\n  Brain.Screen.setFillColor(transparent);\n  InertialSensor.startCalibration();\n  while (InertialSensor.isCalibrating()) { task::sleep(50); }\n  wait(3.0, seconds);\n  // Print all Inertial sensing values to the screen in an infinite loop\n  while (!Brain.Screen.pressing()) {\n    // Clear the screen and set the cursor to top left corner on each loop\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Heading:\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(InertialSensor.heading(degrees)));\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"Rotation:\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(InertialSensor.rotation(degrees)));\n    // A brief delay to allow text to be printed without distortion or tearing\n    wait(0.1, seconds);\n  wait(5, msec);\n  }\n  Brain.Screen.setFillColor(green);\n  Brain.Screen.drawCircle(250, 125, 75);\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[1,10,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm"},"triportSourcePort":22},{"port":[16],"name":"InertialSensor","customName":true,"deviceType":"Inertial","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}