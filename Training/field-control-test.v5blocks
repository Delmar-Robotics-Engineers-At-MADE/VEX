{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"rN9K/`w!7#2572c{XojV\"><field name=\"MOTOR\">claw</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Mwr5(Ud%?6wZQ_#V(i[{\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_motion_set_motor_torque\" id=\"/*^Px+P8Z^AN#5eybD0k\"><field name=\"MOTOR\">claw</field><value name=\"TORQUE\"><shadow type=\"math_number\" id=\"kt-Rvl:%u),;tKR3bo{h\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_motion_set_motor_position\" id=\"$1CO5fnm)tnhmceil`Y-\"><field name=\"MOTOR\">claw</field><field name=\"UNITS\">deg</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\")mw@6uc_)n45^-(~:;Bz\"><field name=\"NUM\">0</field></shadow></value></block></next></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"z4]y)+dBOb-7RT6?WI}8\" x=\"130\" y=\"350\"><next><block type=\"v5_control_forever\" id=\"]rZ#@0!c^D%K.Hq:Y}-+\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_set_cursor\" id=\"gaAaw1}KN~,,dl{y?+Y@\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\")q@{o3LK`fP_PV(-Fc|I\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"lg^+sjQf:m[9l9MGLa0Q\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"X9ji6Uo,Rupok:l#e/mT\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"KB+dBX7PNt@8+qqe@7k1\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_current_of_motor\" id=\"Ed%ednXIy9M_Z@,~JFHr\"><field name=\"MOTOR\">claw</field></block></value><next><block type=\"v5_looks_print\" id=\"[D(iY|3[%M`8K|L=sy:e\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"#4`/z(bH_YnT;aIsfhjb\"><field name=\"TEXT\">       Amps</field></shadow></value><next><block type=\"v5_looks_set_cursor\" id=\"4@{TmMmjoT*;0].-^0P*\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"GmMM0m|;iHL=No]0Cqm=\"><field name=\"NUM\">2</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"yxB,Uf(x.dT/3.goo-C|\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"32}mk[QvGojHX?45@WYK\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"0fO6Mk|7oIi^=!bGe,L8\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_position_of_motor\" id=\"Jxf5SnCR0{cR*.Oqq^_:\"><field name=\"MOTOR\">claw</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"v5_looks_print\" id=\"2P;Xj!}2s:JbjvkGB7Fs\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"bo~O_$f58A4Bg6}msY%U\"><field name=\"TEXT\">      Degs</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block><block type=\"v5_events_when_autonomous\" id=\"}{BaC]M.T6Nbt33`0$[.\" x=\"830\" y=\"490\"><next><block type=\"v5_motion_spin_to_position\" id=\"Qd~TaEgz/fU4mrhkp6?H\"><field name=\"MOTOR\">claw</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"*QEmB#VmE(2!;NWa3Lx1\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_control_wait\" id=\":fm48$`X__V`4o3?o2%I\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"7YuJS{e3;Xen]xYc,%`a\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_motion_spin_to_position\" id=\"ptAjdV+B`;o2+QJKEVg3\"><field name=\"MOTOR\">claw</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"):Coj?^,=K+83Jdx_eM%\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_looks_clear_all_rows\" id=\"U4d[IO@H}s:4Mfj!r}NR\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_set_cursor\" id=\"Wd|zRXNSN/$vM!j(jz$0\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"As[)2H)T,!X]?kjF[qbE\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"-rac3[hyf!EJr[~)~^QY\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"!h*ov)*YVQ`a-_E2CqmB\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Y!}F!xlO4[fJb|r8^w)1\"><field name=\"TEXT\">Done!</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\"E(;QHMf}$uY){e5M-2ac\" x=\"330\" y=\"790\"><next><block type=\"v5_control_forever\" id=\"L)[mzF1i8!/?(#3y@Wj#\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_elseif_else\" id=\"(BU[jpWX@Y5GwwW.#F#+\"><mutation branches=\"2\"></mutation><field name=\"BRANCH_BLANK\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_REMOVE\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_ADD\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_add.png</field><value name=\"CONDITION1\"><block type=\"v5_sensing_pressing_controller\" id=\"*$qZX?{VZ@M4v=C!xB!B\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field></block></value><statement name=\"SUBSTACK1\"><block type=\"v5_motion_spin\" id=\"8%RBlX-qr%npxB[zD,VU\"><field name=\"MOTOR\">claw</field><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"v5_sensing_pressing_controller\" id=\"DatC%njEV:Q7xZS7c=`r\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field></block></value><statement name=\"SUBSTACK2\"><block type=\"v5_motion_spin\" id=\"h+2#toln!M=oM(|C;_mz\"><field name=\"MOTOR\">claw</field><field name=\"DIRECTION\">rev</field></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"v5_motion_stop_motor\" id=\"rENNFNQO35N[F9k2x00h\"><field name=\"MOTOR\">claw</field></block></statement></block></statement></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[3],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor claw = motor(PORT3, ratio18_1, false);\n\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  claw.setVelocity(50.0, percent);\n  claw.setMaxTorque(50.0, percent);\n  claw.setRotation(0.0, degrees);\n  return 0;\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(claw.current(amp)));\n    Brain.Screen.print(\"       Amps\");\n    Brain.Screen.setCursor(2, 1);\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(claw.rotation(degrees)));\n    Brain.Screen.print(\"      Degs\");\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  claw.spinToPosition(100.0, degrees, true);\n  wait(1.0, seconds);\n  claw.spinToPosition(0.0, degrees, true);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(\"Done!\");\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_1() {\n  while (true) {\n    if (Controller1.ButtonR1.pressing()) {\n      claw.spin(forward);\n    } else if (Controller1.ButtonR2.pressing()) {\n      claw.spin(reverse);\n    } else {\n      claw.stop();\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\nvex::task drive1(ondriver_drivercontrol_1);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\ndrive1.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}