{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable><variable type=\"\" id=\"9[VyTcCc)lV%-HzY6ubq\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">DriveVel</variable><variable type=\"broadcast_msg\" id=\"7kev?B59*ls$K;Suf1](\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">message1</variable></variables><comment id=\"C^(J]B~ON+4tEECNu~]$\" x=\"471\" y=\"-61\" h=\"200\" w=\"200\">Port 1: ForkMotorGroup\nPort 2: RightDrive\nPort3: LeftFork\nPort4: ForkMotorGroup\nPort5: Radio\nPort9: InertialSensor</comment><block type=\"v5_events_when_started\" id=\"%Kw#$Q`##@9nCki*8(CY\" x=\"10\" y=\"10\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"q:WbuzQV2E+6I},sRn67\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Sg!(Le5:aa/!KW*`,/C,\"><field name=\"NUM\">50</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"4An-L8vgPGyKb}GBs:,F\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"~|8K^sou:.BwZ+vYuC5@\"><field name=\"NUM\">1000</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"-H5mwVc1~Pa2o!y4IKU)\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"n4rwJ0~w^Ky67u.5WU{V\"><field name=\"NUM\">1200</field></shadow></value></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[12],"name":"RightFork","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"up","rev":"down","gear":"ratio36_1"},"triportSourcePort":22},{"port":[11],"name":"LeftFork","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"up","rev":"down","gear":"ratio36_1"},"triportSourcePort":22},{"port":[1,10,2],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"threewire","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":22},{"port":[1],"name":"BumperA","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22}],"slot":5,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor RightFork = motor(PORT12, ratio36_1, true);\n\nmotor LeftFork = motor(PORT11, ratio36_1, false);\n\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ngyro DrivetrainGyro = gyro(Brain.ThreeWirePort.B);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 319.19, 320, 40, mm, 1);\n\nbumper BumperA = bumper(Brain.ThreeWirePort.A);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate();\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable, DriveVel;\n\nevent message1 = event();\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.driveFor(forward, 1000.0, mm, true);\n  Drivetrain.driveFor(reverse, 1200.0, mm, true);\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}