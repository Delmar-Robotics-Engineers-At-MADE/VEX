{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable><variable type=\"\" id=\"5U)uKR!(@)%?Obz=k#-z\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">inertialspeed</variable></variables><block type=\"v5_events_when_started\" id=\"^(W1X97]L6GN`L1,=MLw\" x=\"-250\" y=\"-30\"><next><block type=\"procedures_call\" id=\"o.RE[[KZ@Ed__/s1W]SS\"><mutation proccode=\"runAutonomous\" proceduredefid=\"u76?ax5O8xs#7C*:yHcm\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"v5_events_when_autonomous\" id=\"PH#QI(~A6}?pPD}NFsxx\" x=\"30\" y=\"-30\"><next><block type=\"procedures_call\" id=\"_!(v5!ZIR$olf)vm,}kS\"><mutation proccode=\"runAutonomous\" proceduredefid=\"u76?ax5O8xs#7C*:yHcm\" argumentids=\"[]\" warp=\"false\"></mutation></block></next></block><block type=\"procedures_definition\" id=\"}7Z63;3F6zT3Pb$M=}3-\" x=\"710\" y=\"70\"><statement name=\"custom_block\"><shadow type=\"procedures_prototype\" id=\"u76?ax5O8xs#7C*:yHcm\"><mutation proccode=\"runAutonomous\" proceduredefid=\"u76?ax5O8xs#7C*:yHcm\" argumentids=\"[]\" argumentnames=\"[]\" argumentdefaults=\"[]\" argumenttypes=\"[]\" warp=\"false\"></mutation></shadow></statement></block></xml>","rconfig":[{"port":[9,8],"name":"Fork","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"Fork","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"RightMotorGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[19,20],"name":"LeftMotorGroup","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[3],"name":"Magnet3","customName":false,"deviceType":"Magnet","deviceClass":"electromagnet","setting":{"id":"partner"},"triportSourcePort":22},{"port":[6],"name":"Inertial6","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor ForkMotorA = motor(PORT9, ratio18_1, false);\nmotor ForkMotorB = motor(PORT8, ratio18_1, true);\nmotor_group Fork = motor_group(ForkMotorA, ForkMotorB);\n\ncontroller Controller1 = controller(primary);\nmotor RightMotorGroupMotorA = motor(PORT1, ratio18_1, true);\nmotor RightMotorGroupMotorB = motor(PORT2, ratio18_1, false);\nmotor_group RightMotorGroup = motor_group(RightMotorGroupMotorA, RightMotorGroupMotorB);\n\nmotor LeftMotorGroupMotorA = motor(PORT19, ratio18_1, true);\nmotor LeftMotorGroupMotorB = motor(PORT20, ratio18_1, false);\nmotor_group LeftMotorGroup = motor_group(LeftMotorGroupMotorA, LeftMotorGroupMotorB);\n\nelectromagnet Magnet3 = electromagnet(PORT3);\ninertial Inertial6 = inertial(PORT6);\n\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1XBButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonX/ButtonB status to control Fork\n      if (Controller1.ButtonX.pressing()) {\n        Fork.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Fork.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Fork.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\ndouble Magnet3_duration = 500.0;\n// User defined function\nvoid myblockfunction_runAutonomous();\n\nfloat myVariable, inertialspeed;\n\n// User defined function\nvoid myblockfunction_runAutonomous() {\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  myblockfunction_runAutonomous();\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  myblockfunction_runAutonomous();\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}