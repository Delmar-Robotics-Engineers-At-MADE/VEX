{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_controller_button\" id=\"a@,^;ZfC{kEAnYBf)I4)\" x=\"50\" y=\"210\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_looks_print\" id=\"ayHUuM{=w#7CA6hh9[K)\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"/RmFw*b^6=o5FpVB5.JJ\"><field name=\"TEXT\">I dont know what I'm doing</field></shadow></value><next><block type=\"v5_looks_print\" id=\"DCi3lSS%A|@l?,5j^)BD\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"qSW1rlX%InY9u-wrIv9J\"><field name=\"TEXT\"> If you are reading this tho It means I've done something right :D</field></shadow></value></block></next></block></next></block><block type=\"v5_events_when_driver\" id=\",c7P6Wnvos`2{%Za)YFC\" x=\"90\" y=\"631\"><next><block type=\"v5_control_forever\" id=\"H%8Sx+VmC~BgzBU7(CP(\"><statement name=\"SUBSTACK\"><block type=\"v5_drivetrain_set_drive_velocity\" id=\"?Um=N+^^d,vowhg#.oOt\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"A2~y)O!]Nl%jjD]!pj2(\"><field name=\"NUM\">50</field></shadow><block type=\"v5_sensing_position_of_controller\" id=\";gwX%jdI-L~ciYS:^+QY\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis3</field></block></value><next><block type=\"v5_drivetrain_set_turn_velocity\" id=\"B{(pqKdCl*b|nZeju3jM\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"pciTxP%-(0IRmia~P.Pt\"><field name=\"NUM\">50</field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"X2EDU2nFejyq1j5sZSLR\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis1</field></block></value></block></next></block></statement></block></next></block></xml>","rconfig":[{"port":[13,12],"name":"MotorGroup1","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[1,10,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"MotorGroup1","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":6,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor MotorGroup1MotorA = motor(PORT13, ratio18_1, false);\nmotor MotorGroup1MotorB = motor(PORT12, ratio18_1, true);\nmotor_group MotorGroup1 = motor_group(MotorGroup1MotorA, MotorGroup1MotorB);\n\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonX/ButtonB status to control MotorGroup1\n      if (Controller1.ButtonX.pressing()) {\n        MotorGroup1.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        MotorGroup1.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        MotorGroup1.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when Controller1 ButtonL1 pressed\" hat block\nvoid onevent_Controller1ButtonL1_pressed_0() {\n  Brain.Screen.print(\"I dont know what I\\'m doing\");\n  Brain.Screen.print(\" If you are reading this tho It means I\\'ve done something right :D\");\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  while (true) {\n    Drivetrain.setDriveVelocity(Controller1.Axis3.position(), percent);\n    Drivetrain.setTurnVelocity(Controller1.Axis1.position(), percent);\n  wait(5, msec);\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonL1.pressed(onevent_Controller1ButtonL1_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n}","target":"Physical"}